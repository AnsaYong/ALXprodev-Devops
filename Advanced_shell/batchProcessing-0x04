#!/bin/bash

# List of Pokémon names
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Maximum retry attempts
max_retries=3
retry_delay=2  # seconds

# Function to fetch Pokémon data
fetch_pokemon_data() {
  pokemon=$1
  url="https://pokeapi.co/api/v2/pokemon/$pokemon"
  output_file="${pokemon}.json"

  # Retry logic
  attempt=0
  success=0
  while [ $attempt -lt $max_retries ]; do
    # Make the request and save the response to the corresponding file
    response=$(curl -s -w "%{http_code}" -o $output_file $url)

    # Check if the request was successful (HTTP status code 200)
    if [ "$response" -eq 200 ]; then
      success=1
      echo "Data for $pokemon saved to $output_file."
      break
    else
      attempt=$((attempt + 1))
      echo "Attempt $attempt failed for $pokemon. HTTP Status Code: $response"
      sleep $retry_delay  # Wait before retrying
    fi
  done

  # If the request failed after all retries, log the error and continue
  if [ $success -eq 0 ]; then
    echo "Request for $pokemon failed after $max_retries attempts. Logging error." >> errors.txt
    echo "Error for $pokemon logged to errors.txt."
  fi
}

# Loop through each Pokémon and fetch data in parallel
for pokemon in "${pokemon_list[@]}"; do
  fetch_pokemon_data $pokemon &  # Run the fetch function in the background
done

# Wait for all background processes to complete
wait

# Print a message once all requests are completed
echo "All Pokémon data retrieval complete."
